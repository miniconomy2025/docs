openapi: 3.0.1
info:
  title: RetailBank
  version: '1.0'
paths:
  /accounts:
    post:
      tags:
        - AccountEndpoints
      summary: Create Transactional Account
      description: "Create a transactional account. Transactional \r\naccounts have an account number consisting of 12 \r\ndigits starting with `1000`."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionAccountRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransactionalAccountResponse'
    get:
      tags:
        - AccountEndpoints
      summary: Get All Accounts
      description: "Lookup all accounts by account type in order of newest to oldest.\r\n`next` will contain the URL for the next batch of\r\naccounts, or it will be `null` if no accounts were returned.\r\n\r\nNotable accounts:\r\n- Retail Bank Main Account: `1000`\r\n- Owners Equity Account: `1001`\r\n- Interest Income Account: `1002`\r\n- Loan Control Account: `1003`\r\n- Bad Debts Account: `1004`\r\n- Commercial Bank: `2000`"
      parameters:
        - name: accountType
          in: query
          schema:
            $ref: '#/components/schemas/LedgerAccountType'
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 25
        - name: timestampMax
          in: query
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDto'
  '/accounts/{id}':
    get:
      tags:
        - AccountEndpoints
      summary: Get An Account
      description: "Get information about any account.\r\n\r\nNotable accounts:\r\n- Retail Bank Main Account: `1000`\r\n- Owners Equity Account: `1001`\r\n- Interest Income Account: `1002`\r\n- Loan Control Account: `1003`\r\n- Bad Debts Account: `1004`\r\n- Commercial Bank: `2000`"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '404':
          description: Not Found
  '/accounts/{id}/transfers':
    get:
      tags:
        - AccountEndpoints
      summary: Get An Account's Transfers
      description: "Get all transfers credited/debited to an account,\r\nreturns empty array if account does not exist.\r\n`next` will contain the URL for the next batch of\r\ntranfers, or it will be `null` if no transfers were returned."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 25
        - name: timestampMax
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: side
          in: query
          schema:
            $ref: '#/components/schemas/TransferSide'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDtoCursorPagination'
  '/accounts/{id}/loans':
    get:
      tags:
        - AccountEndpoints
      summary: Get An Account's Loans
      description: "Get all loans to this account, returns empty array if\r\naccount does not exist."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDto'
  /loans:
    post:
      tags:
        - LoanEndpoints
      summary: Issue a Loan to a Transactional Account
      description: "Create a loan account of the requested amount,\r\nand deposit the principal amount into the debtor's\r\naccount. Each month, interest will be added to the\r\nto the loan account, and an installment will be\r\ntranferred from the debtor's account to the loan\r\naccount. The loan will pay itself off after 60 months."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanAccountRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoanAccountResponse'
  /report:
    get:
      tags:
        - ReportingEndpoints
      responses:
        '200':
          description: OK
  /simulation:
    post:
      tags:
        - SimulationEndpoints
      summary: Start Simulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSimulationRequest'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - SimulationEndpoints
      summary: Reset Simulation
      responses:
        '204':
          description: No Content
  /transfers:
    post:
      tags:
        - TransferEndpoints
      summary: Transfer
      description: "Transfer money between accounts. Debiting account\r\n`from` and crediting account `to`. For idempotency,\r\nthe all four fields (`from`, `to`, `amount`, `reference`)\r\nmust together be unique. `reference` should be kept\r\nthe same for repeated requests to ensure multiple\r\ntransactions are not mistakenly created. If you need\r\nto check if a transfer was created with this request if \r\nthis is an existing transfer, check the `creationStatus` \r\nfield in the response. This can be used \r\nfor transfers between retail bank accounts, and \r\nfor transfers to the commercial bank. Retail bank \r\naccount numbers start with `1000`, while commercial \r\nbank account numbers start with `2000`."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransferResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - TransferEndpoints
      summary: Get All Transfers
      description: "Get all transfers. `next` will contain the URL for\r\nthe next batch of tranfers, or it will be `null` if\r\nno transfers were returned."
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 25
        - name: timestampMax
          in: query
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDtoCursorPagination'
  '/transfers/{id}':
    get:
      tags:
        - TransferEndpoints
      summary: Get A Transfer
      description: Get information about a transfer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDto'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    AccountDto:
      required:
        - accountType
        - balancePending
        - balancePosted
        - closed
        - createdAt
        - creditsPending
        - creditsPosted
        - debitsPending
        - debitsPosted
        - id
      type: object
      properties:
        id:
          maxLength: 13
          minLength: 4
          pattern: '^([0-9]{4})|([0-9]{12,13})$'
          type: string
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        debitsPending:
          minimum: 0
          type: integer
          format: int128
        debitsPosted:
          minimum: 0
          type: integer
          format: int128
        creditsPending:
          minimum: 0
          type: integer
          format: int128
        creditsPosted:
          minimum: 0
          type: integer
          format: int128
        balancePending:
          type: integer
          format: int128
        balancePosted:
          type: integer
          format: int128
        closed:
          type: boolean
        createdAt:
          minimum: 0
          type: integer
          format: int64
      additionalProperties: false
    CreateLoanAccountRequest:
      required:
        - debtorAccountId
        - loanAmountCents
      type: object
      properties:
        loanAmountCents:
          minimum: 1
          type: integer
          format: int64
        debtorAccountId:
          maxLength: 12
          minLength: 12
          pattern: '^[0-9]+$'
          type: string
      additionalProperties: false
    CreateLoanAccountResponse:
      required:
        - accountId
      type: object
      properties:
        accountId:
          maxLength: 13
          minLength: 13
          pattern: '^[0-9]+$'
          type: string
      additionalProperties: false
    CreateTransactionAccountRequest:
      required:
        - salaryCents
      type: object
      properties:
        salaryCents:
          minimum: 0
          type: integer
          format: int64
      additionalProperties: false
    CreateTransactionalAccountResponse:
      required:
        - accountId
      type: object
      properties:
        accountId:
          maxLength: 12
          minLength: 12
          pattern: '^[0-9]+$'
          type: string
      additionalProperties: false
    CreateTransferRequest:
      required:
        - amountCents
        - from
        - reference
        - to
      type: object
      properties:
        from:
          maxLength: 12
          minLength: 12
          pattern: '^[0-9]+$'
          type: string
        to:
          maxLength: 13
          minLength: 12
          pattern: '^[0-9]+$'
          type: string
        amountCents:
          minimum: 1
          type: integer
          format: int128
        reference:
          minimum: 1
          type: integer
          format: int64
      additionalProperties: false
    CreateTransferResponse:
      required:
        - transferId
      type: object
      properties:
        transferId:
          maxLength: 32
          minLength: 32
          pattern: '^[0-9A-F]+$'
          type: string
      additionalProperties: false
    LedgerAccountType:
      enum:
        - Internal
        - Transactional
        - Loan
      type: string
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    StartSimulationRequest:
      required:
        - epochStartTime
      type: object
      properties:
        epochStartTime:
          minimum: 0
          type: integer
          format: int64
      additionalProperties: false
    TransferDto:
      required:
        - amount
        - creditAccountId
        - debitAccountId
        - reference
        - timestamp
        - transferId
        - transferType
      type: object
      properties:
        transferId:
          maxLength: 32
          minLength: 32
          pattern: '^[0-9A-F]+$'
          type: string
        transferType:
          $ref: '#/components/schemas/TransferType'
        debitAccountId:
          maxLength: 13
          minLength: 4
          pattern: '^([0-9]{4})|([0-9]{12,13})$'
          type: string
        creditAccountId:
          maxLength: 13
          minLength: 4
          pattern: '^([0-9]{4})|([0-9]{12,13})$'
          type: string
        amount:
          minimum: 0
          type: integer
          format: int128
        parentId:
          maxLength: 32
          minLength: 32
          pattern: '^[0-9A-F]+$'
          type: string
          nullable: true
        timestamp:
          minimum: 0
          type: integer
          format: int64
        reference:
          minimum: 1
          type: integer
          format: int64
      additionalProperties: false
    TransferDtoCursorPagination:
      required:
        - items
        - next
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransferDto'
        next:
          minLength: 1
          type: string
          format: uri
      additionalProperties: false
    TransferSide:
      enum:
        - Debit
        - Credit
      type: string
    TransferType:
      enum:
        - Transfer
        - StartTransfer
        - CompleteTransfer
        - CancelTransfer
        - BalanceDebit
        - BalanceCredit
        - CloseDebit
        - CloseCredit
      type: string
