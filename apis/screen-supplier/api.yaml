openapi: 3.0.3
info:
  title: Screen Supplier API
  description: API for screen suppliers
  version: 1.0.0
  contact:
    name: Screen Supplier Service
servers:
  - url: https://screen-supplier-api.projects.bbdgrad.com

tags:
  - name: Screen
    description: Screen products and inventory
  - name: Orders
    description: Customer screen orders
  - name: Payments
    description: Payment confirmations from bank
  - name: Logistics
    description: Pickup and delivery operations
  - name: Simulation
    description: Simulation time management and control

paths:
  /screens:
    get:
      tags:
        - Screen
      summary: Get screens on offer, and current price based on our average costs
      description: Returns available screen inventory and current pricing
      responses:
        '200':
          description: Available screens and pricing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  /order:
    post:
      tags:
        - Orders
      summary: Create a new screen order
      description: Create a new order for screens from customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          description: Invalid request or insufficient stock

  /order/{id}:
    get:
      tags:
        - Orders
      summary: Get order status and details
      description: Retrieve the current status and details of a specific order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
        '404':
          description: Order not found

  /payment:
    post:
      tags:
        - Payments
      summary: Process payment confirmation from bank for screen orders
      description: |
        Endpoint called by the commercial bank to confirm payments.
        Updates order status and payment amounts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentConfirmationRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentConfirmationResponse'
        '400':
          description: Invalid payment request

  /logistics:
    post:
      tags:
        - Logistics
      summary: Handle logistics operations - both deliveries and pickups
      description: |
        Unified endpoint for logistics operations:
        - **DELIVERY**: Bulk logistics delivers materials/equipment to us
        - **PICKUP**: Bulk logistics picks up screens from us for customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogisticsRequest'
      responses:
        '200':
          description: Logistics operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogisticsResponse'
        '400':
          description: Invalid logistics request
        '404':
          description: Order not found or not ready

  /simulation:
    post:
      tags:
        - Simulation
      summary: Start the simulation with Unix epoch timestamp
      description: |
        Initialize and start the simulation time system.
        
        **Time System:**
        - Accepts Unix epoch timestamp for synchronization
        - 2 real minutes = 1 simulation day
        - Simulation date starts at 2050-01-01
        - Daily production cycles run automatically
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationStartRequest'
      responses:
        '200':
          description: Simulation started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationStartResponse'
        '400':
          description: Invalid start time or simulation already running

    get:
      tags:
        - Simulation
      summary: Get current simulation status and time
      description: |
        Returns the current simulation state including:
        - Running status
        - Current simulation day
        - Simulation date/time
        - Time remaining until next day
      responses:
        '200':
          description: Current simulation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationStatusResponse'


components:
  schemas:
    # Product/Screen schemas
    ProductResponse:
      type: object
      properties:
        screens:
          $ref: '#/components/schemas/Screens'

    Screens:
      type: object
      properties:
        quantity:
          type: integer
          description: Available screens in stock
          example: 1500
        price:
          type: integer
          description: Price per screen in currency units
          example: 250

    # Order schemas
    CreateOrderRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          description: Number of screens to order
          example: 100

    CreateOrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          description: Unique order identifier
          example: 12345
        totalPrice:
          type: integer
          description: Total order amount
          example: 25000
        bankAccountNumber:
          type: string
          description: Our bank account for payment
          example: "1234"
        orderStatusLink:
          type: string
          description: URL to check order status
          example: "/order/12345"

    OrderStatusResponse:
      type: object
      properties:
        orderId:
          type: integer
          example: 12345
        quantity:
          type: integer
          example: 100
        unitPrice:
          type: integer
          example: 250
        totalPrice:
          type: integer
          example: 25000
        status:
          type: string
          enum: [waiting_payment, waiting_collection, collected, abandoned]
          example: "waiting_payment"
        orderDate:
          type: string
          format: date-time
          example: "2050-01-15T00:00:00"
        amountPaid:
          type: integer
          nullable: true
          description: Amount paid so far
          example: 15000
        remainingBalance:
          type: integer
          description: Amount still owed
          example: 10000
        isFullyPaid:
          type: boolean
          example: false

    # Payment schemas
    PaymentConfirmationRequest:
      type: object
      required:
        - referenceId
        - accountNumber
        - amountPaid
      properties:
        referenceId:
          type: string
          description: Order ID as reference
          example: "12345"
        accountNumber:
          type: string
          description: Paying account number
          example: "2345"
        amountPaid:
          type: number
          format: decimal
          description: Amount paid in this transaction
          example: 15000.00

    PaymentConfirmationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        orderId:
          type: string
          example: "12345"
        amountReceived:
          type: number
          format: decimal
          example: 15000.00
        totalPaid:
          type: number
          format: decimal
          example: 15000.00
        orderTotal:
          type: number
          format: decimal
          example: 25000.00
        remainingBalance:
          type: number
          format: decimal
          example: 10000.00
        status:
          type: string
          example: "waiting_payment"
        message:
          type: string
          example: "Partial payment received. Remaining balance: 10000"
        isFullyPaid:
          type: boolean
          example: false
        processedAt:
          type: string
          format: date-time
          example: "2050-01-15T10:30:00Z"

    # Logistics schemas
    LogisticsRequest:
      type: object
      required:
        - id
        - type
        - quantity
      properties:
        id:
          type: integer
          description: Order ID (for pickup) or Shipment ID (for delivery)
          example: 67890
        type:
          type: string
          enum: [PICKUP, DELIVERY]
          description: Type of logistics operation
          example: "DELIVERY"
        quantity:
          type: integer
          minimum: 1
          description: Quantity being moved
          example: 1000

    LogisticsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          type: integer
          description: Shipment ID (for delivery) or Order ID (for pickup)
          example: 67890
        orderId:
          type: integer
          description: Related order ID
          example: 12345
        quantity:
          type: integer
          description: Quantity processed
          example: 1000
        itemType:
          type: string
          description: Type of items (screens, sand, copper, equipment)
          example: "sand"
        message:
          type: string
          description: Operation result message
          example: "Successfully received 1000 units of sand"
        processedAt:
          type: string
          format: date-time
          example: "2050-01-15T14:00:00Z"

    # Simulation schemas
    SimulationStartRequest:
      type: object
      required:
        - unixEpochStart
      properties:
        unixEpochStart:
          type: integer
          format: int64
          description: Unix timestamp when simulation should start
          example: 1735826400

    SimulationStartResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Simulation started successfully"
        startedAt:
          type: string
          format: date-time
          description: When simulation started (ISO format)
          example: "2025-01-02T12:00:00+00:00"
        currentDay:
          type: integer
          description: Current simulation day (0-based)
          example: 0
        simulationDateTime:
          type: string
          format: date-time
          description: Current simulation date/time
          example: "2050-01-01T00:00:00"

    SimulationStatusResponse:
      type: object
      properties:
        isRunning:
          type: boolean
          description: Whether simulation is currently running
          example: true
        currentDay:
          type: integer
          description: Current simulation day (0-based)
          example: 5
        simulationDateTime:
          type: string
          format: date-time
          description: Current simulation date/time
          example: "2050-01-06T00:00:00"
        

    # Error schema
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request parameters"